# Definici칩n de los stages disponibles
stages:
  - test
  - deploy

# Variables de entorno para el entorno de pruebas
variables:
  NODE_ENV: "test"

# Definici칩n del job para ejecutar las pruebas y almacenar cobertura
test_job:
  stage: test
  image: node:14
  before_script:
    - apt-get update && apt-get install -y build-essential
    - npm install
  script:
    - npm install jest @babel/core @babel/preset-env babel-jest --save-dev
    - npm run test:coverage
  artifacts:
    paths:
      - coverage/
    expire_in: 1 week

# Job de despliegue
deploy_job:
  stage: deploy
  image: docker:latest  # Usa la imagen de Docker
  before_script:
    - eval $(ssh-agent -s)  # Inicia el agente SSH
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -  # A침ade la clave privada
    - mkdir -p ~/.ssh
    - ssh-keyscan -H 192.168.114.232 >> ~/.ssh/known_hosts  # Agrega la IP de la VM a known_hosts
  script:
    - ssh ubuntu@192.168.114.232 "mkdir -p /home/ubuntu/unit-testing-fizzbuzz"  # Crea el directorio en la VM
    - scp -r . ubuntu@192.168.114.232:/home/ubuntu/unit-testing-fizzbuzz  # Copia el proyecto a la VM
    - ssh ubuntu@192.168.114.232 "cd /home/ubuntu/unit-testing-fizzbuzz && docker-compose up -d --build"  # Levanta la aplicaci칩n usando Docker Compose

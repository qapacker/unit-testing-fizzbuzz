stages:
  - test
  - deploy

test_job:
  stage: test
  image: node:14
  before_script:
    - apt-get update && apt-get install -y build-essential
    - npm install
  script:
    - npm install jest @babel/core @babel/preset-env babel-jest --save-dev
    - npm run test:coverage
  artifacts:
    paths:
      - coverage/
    expire_in: 1 week

deploy_job:
  stage: deploy
  image: ubuntu:latest
  before_script:
    - eval $(ssh-agent -s)
    - apt-get update && apt-get install -y ssh iputils-ping rsync
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" > ~/.ssh/deploy-key.pem
    - chmod 600 ~/.ssh/deploy-key.pem
    - ssh-keyscan -H $SSH_HOST >> ~/.ssh/known_hosts
    - echo "Verificando conectividad con $SSH_HOST..."
    - ping -c 4 $SSH_HOST

  script:
    # Crear el directorio remoto si no existe
    - echo "Creando directorio de despliegue en el servidor remoto..."
    - ssh -o StrictHostKeyChecking=no -i ~/.ssh/deploy-key.pem ubuntu@$SSH_HOST "mkdir -p $DEPLOY_DIR"
    
    # Sincronizar archivos al servidor remoto
    - echo "Sincronizando archivos con el servidor remoto..."
    - rsync -av --exclude='.ssh/' --exclude='node_modules/' --exclude='*.git*' -e "ssh -i ~/.ssh/deploy-key.pem" ./ ubuntu@$SSH_HOST:$DEPLOY_DIR

    # Construir las im√°genes y levantar los contenedores en un solo paso
    - echo "Construyendo e iniciando los contenedores Docker en el servidor remoto..."
    - ssh -o StrictHostKeyChecking=no -i ~/.ssh/deploy-key.pem ubuntu@$SSH_HOST "
        cd $DEPLOY_DIR && docker compose up --build"

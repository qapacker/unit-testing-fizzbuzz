# Definici贸n de los stages disponibles
stages:
  - test
  - deploy

# Variables de entorno para el entorno de pruebas
variables:
  NODE_ENV: "test"

# Definici贸n del job para ejecutar las pruebas y almacenar cobertura
# test_job:
#   stage: test
#   image: node:14
#   before_script:
#     - apt-get update && apt-get install -y build-essential
#     - npm install
#   script:
#     - npm install jest @babel/core @babel/preset-env babel-jest --save-dev
#     - npm run test:coverage
#   artifacts:
#     paths:
#       - coverage/
#     expire_in: 1 week

# Job de despliegue
deploy_job:
  stage: deploy
  image: docker:latest  # Usa la imagen de Docker
  before_script:
    - eval $(ssh-agent -s)  # Inicia el agente SSH
    - echo "$SSH_PRIVATE_KEY" | base64 --decode | ssh-add -  # Usa la clave SSH directamente
    - mkdir -p ~/.ssh
    - ssh-keyscan -H 192.168.114.232 >> ~/.ssh/known_hosts  # Agrega el host a `known_hosts`

  script:
    - ssh -v ubuntu@192.168.114.232 "echo 'Conectado!'"  # Verifica la conexi贸n
    - ssh ubuntu@192.168.114.232 "mkdir -p /home/ubuntu/unit-testing-fizzbuzz"  # Crea el directorio en la VM
    - scp -r . ubuntu@192.168.114.232:/home/ubuntu/unit-testing-fizzbuzz  # Copia el proyecto a la VM
    - ssh ubuntu@192.168.114.232 "cd /home/ubuntu/unit-testing-fizzbuzz && docker-compose up -d --build"  # Levanta la aplicaci贸n usando Docker Compose
